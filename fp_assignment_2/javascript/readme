# Authors: Joseph Pecoraro (jjp1820) and Will Johansson (whj0310)
# Date: Wednesday September 23, 2009
# Description: Functional Programming Assignment #2
# JavaScript Example

How To Run The Example (and Tests)
----------------------------------

  1. Run the JavaScript Source through an Interpreter
     (Interperter is assumed to be aliased as "js")

    shell> js -f seq.js
    
  2. Alternatively in a Modern Browser (Firefox/Safari)
     with a JavaScript Console. Open "index.html":
     
    shell> open index.html


Links to JavaScript Interpreters
--------------------------------

  All of the following Interpreters support the "-f <file>" command line switch
  to interpret a source file and have been tested with our script.

  1. Apple's Nitro (C++)
  If you're on Mac OS X you may be able to use the System JS Interpreter:
  /System/Library/Frameworks/JavaScriptCore.framework/Resources/jsc
  Information => http://webkit.org/
  Build Info => http://webkit.org/building/build.html

  2. Mozilla's Spidermonkey (C)
  Information => http://www.mozilla.org/js/spidermonkey/
  Download => http://ftp.mozilla.org/pub/mozilla.org/js/
  Build Info => https://developer.mozilla.org/en/SpiderMonkey_Build_Documentation

  3. Mozilla's Rhino (Java)
  Information => http://www.mozilla.org/rhino/
  Download => http://www.mozilla.org/rhino/download.html

  4. Google's v8 (C++)
  Information => http://code.google.com/p/v8/
  Build Info => http://code.google.com/apis/v8/build.html


Overview of the Code
--------------------

  This JavaScript solution represents an infinite list in the following form:
  
    [ elem, function ] = a pair
        ^      ^
        |      |- [tail] function generating another pair
        |-------- [head] element in the list
  
  This solution chose to force a limitation on the infinite lists in order to
  work with native arrays as well as inifite lists.  An infinite list can not
  contain functions. Functions in an infinite lists are assumed to be the
  tail generators. However, with this limitation we can enable the same
  functions that manipulate infinite lists to work with native, finite arrays
  such as [1,2,3]!!
  
  A few extensions are made to the raw Array class in order to simplify the
  readability of the code.  They are namely:
  
    - Array.prototype.empty    - check if an array is empty
    - Array.prototype.dup      - duplicate an array
    - Array.prototype.getHead  - get the first element of any array
    - Array.prototype.getTail  - get the rest of the elements of an array
  
  Using these primatives and a helper function that silently in the background
  works with native arrays and infinite lists the functions that work with
  infinite lists can be implemented straight forwardly none the wiser!
  
  Since a single point in an infinite list is the "pair" mentioned above. You
  can reference such a point and use it repeatedly with the expected results.
  As is the case for a number of the infinite lists used in the code.

